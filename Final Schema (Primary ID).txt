
COMPLETE INVEXIS APPLICATION DATABASE SCHEMA
Version: v2.3 (August 2025) - ENHANCED WITH USAGE EVENTS & PRODUCTION TRACKING
Database: PostgreSQL 14+
Purpose: Multi-tenant Restaurant, Cloud Kitchen and Food Business Management

Document Organization
* Modules 1-4: Organizational Core, Dashboard & Notifications, Reporting, Inventory & Minimal Stock/ABC
* Modules 5-12: Smart Inventory, Vendor Management, Sales & OCR, Menu/Recipes, Analytics, Settings, Subscriptions
* Module 13: Production Planning & AI-Powered Forecasting
* Module 14: Usage Events & Production Tracking (NEW)
* Module 15: Enhanced Image Management (NEW)
* Each module lists all major tables, purpose, column dictionary, and the actual PostgreSQL SQL DDL

MODULE 1: BUSINESS & USER MANAGEMENT

1.1 Businesses
Purpose: Master tenant table; the root of all multi-tenancy.
Relationships:
* FK to BusinessTypes, BillingMachineModels, Languages
* PK for all other core tables
DDL:
CREATE TABLE Businesses (
    business_id           SERIAL PRIMARY KEY,
    name                  VARCHAR(255) NOT NULL UNIQUE,
    business_type_id      INT NOT NULL REFERENCES BusinessTypes(type_id),
    num_workers           INT CHECK (num_workers >= 0),
    business_size         VARCHAR(50) NOT NULL,
    billing_model_id      INT NOT NULL REFERENCES BillingMachineModels(billing_model_id),
    preferred_language_id INT REFERENCES Languages(language_id),
    is_onboarded          BOOLEAN NOT NULL DEFAULT FALSE,
    created_at            TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at            TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

Columns
Name
Type
Constraints/FK
Description
business_id
SERIAL
PK
Each business/tenant
name
VARCHAR(255)
NOT NULL, UNIQUE
Business/restaurant name
business_type_id
INT
NOT NULL, FK ? BusinessTypes
E.g. restaurant, cafe, bakery
num_workers
INT
CHECK >=0
Employees at onboarding
business_size
VARCHAR(50)
NOT NULL
Small/Medium/Large (derived)
billing_model_id
INT
NOT NULL, FK ? BillingMachineModels
Thermal/POS/billing
preferred_language_id
INT
FK ? Languages
'en', 'hi', etc
is_onboarded
BOOLEAN
DEFAULT FALSE
Setup finished
created_at
TIMESTAMP
DEFAULT val
Record creation time
updated_at
TIMESTAMP
DEFAULT val, auto update
Record update


1.2 BusinessTypes
Purpose: Lookup for tenant type
DDL:
CREATE TABLE BusinessTypes (
    type_id   SERIAL PRIMARY KEY,
    type_name VARCHAR(100) NOT NULL UNIQUE,
    description TEXT
);


1.3 BillingMachineModels
CREATE TABLE BillingMachineModels (
    billing_model_id SERIAL PRIMARY KEY,
    model_name       VARCHAR(100) NOT NULL UNIQUE,
    description      TEXT
);


1.4 Languages
CREATE TABLE Languages (
    language_id   SERIAL PRIMARY KEY,
    language_name VARCHAR(100) NOT NULL UNIQUE,
    language_code VARCHAR(10)  NOT NULL UNIQUE,
    is_active     BOOLEAN NOT NULL DEFAULT TRUE
);


1.5 Users
Purpose: Account, authentication, and user details
DDL:
CREATE TABLE Users (
    user_id       SERIAL PRIMARY KEY,
    business_id   INT NOT NULL REFERENCES Businesses(business_id),
    email         VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    name          VARCHAR(255) NOT NULL,
    phone_number  VARCHAR(50),
    role_id       INT NOT NULL REFERENCES Roles(role_id),
    location_id   INT REFERENCES BusinessLocations(location_id),
    is_active     BOOLEAN NOT NULL DEFAULT TRUE,
    password_reset_token VARCHAR(255) UNIQUE,
    password_reset_token_expires_at TIMESTAMP,
    two_factor_enabled BOOLEAN NOT NULL DEFAULT FALSE,
    created_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    last_login_at TIMESTAMP,
    last_active_at TIMESTAMP
);


1.6 Roles
CREATE TABLE Roles (
    role_id      SERIAL PRIMARY KEY,
    business_id  INT NOT NULL REFERENCES Businesses(business_id),
    role_name    VARCHAR(100) NOT NULL,
    description  TEXT,
    is_system_default BOOLEAN NOT NULL DEFAULT FALSE,
    is_active    BOOLEAN NOT NULL DEFAULT TRUE,
    created_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


1.7 Permissions
CREATE TABLE Permissions (
    permission_id   SERIAL PRIMARY KEY,
    permission_name VARCHAR(100) NOT NULL UNIQUE,
    module_name     VARCHAR(100) NOT NULL,
    description     TEXT,
    is_active       BOOLEAN NOT NULL DEFAULT TRUE
);


1.8 RolePermissions
CREATE TABLE RolePermissions (
    role_id       INT NOT NULL REFERENCES Roles(role_id),
    permission_id INT NOT NULL REFERENCES Permissions(permission_id),
    created_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (role_id, permission_id)
);


1.9 BusinessLocations
CREATE TABLE BusinessLocations (
    location_id      SERIAL PRIMARY KEY,
    business_id      INT NOT NULL REFERENCES Businesses(business_id),
    name             VARCHAR(255) NOT NULL,
    address_street   VARCHAR(255),
    address_city     VARCHAR(100),
    address_state    VARCHAR(100),
    address_zip_code VARCHAR(20),
    is_active        BOOLEAN NOT NULL DEFAULT TRUE,
    created_at       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


MODULE 2: DASHBOARD & NOTIFICATIONS

2.1 DashboardWidgets
CREATE TYPE widget_enum AS ENUM ('Metric', 'Graph', 'List', 'Button');
CREATE TABLE DashboardWidgets (
    widget_id     SERIAL PRIMARY KEY,
    name          VARCHAR(100) NOT NULL UNIQUE,
    description   TEXT,
    is_active     BOOLEAN DEFAULT TRUE,
    default_order INT,
    widget_icon   VARCHAR(50),
    widget_type   widget_enum
);


2.2 UserDashboardPreferences
CREATE TABLE UserDashboardPreferences (
    preference_id SERIAL PRIMARY KEY,
    user_id       INT NOT NULL REFERENCES Users(user_id),
    widget_id     INT NOT NULL REFERENCES DashboardWidgets(widget_id),
    display_order INT,
    is_enabled    BOOLEAN DEFAULT TRUE,
    created_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


2.3 UserNotifications
CREATE TABLE UserNotifications (
    notification_id SERIAL PRIMARY KEY,
    business_id INT NOT NULL REFERENCES Businesses(business_id),
    user_id     INT NOT NULL REFERENCES Users(user_id),
    type        VARCHAR(50) NOT NULL,
    title       VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    related_url VARCHAR(255),
    is_read     BOOLEAN NOT NULL DEFAULT FALSE,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


2.4 NotificationPreferences (NEW)
CREATE TABLE NotificationPreferences (
    user_id         INT NOT NULL REFERENCES Users(user_id),
    alert_type      VARCHAR(100)  NOT NULL,
    is_enabled      BOOLEAN NOT NULL DEFAULT TRUE,
    threshold_value DECIMAL(10,2),
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, alert_type)
);


MODULE 3: SUMMARY METRICS & REPORTS

3.1 SalesSummaryMetrics
CREATE TYPE trend_enum AS ENUM ('Up', 'Down', 'Stable');
CREATE TABLE SalesSummaryMetrics (
    summary_id              SERIAL PRIMARY KEY,
    business_id             INT NOT NULL REFERENCES Businesses(business_id),
    report_period           VARCHAR(50) NOT NULL,
    start_date              DATE NOT NULL,
    end_date                DATE NOT NULL,
    total_sales_amount      DECIMAL(12,2) NOT NULL DEFAULT 0.00,
    total_orders            INT NOT NULL DEFAULT 0,
    gross_profit_amount     DECIMAL(12,2) NOT NULL DEFAULT 0.00,
    gross_profit_margin     DECIMAL(5,2),
    wastage_cost_amount     DECIMAL(12,2) NOT NULL DEFAULT 0.00,
    trend_indicator         trend_enum,
    trend_percentage_change DECIMAL(5,2),
    created_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


3.2 QuickReports
CREATE TABLE QuickReports (
    report_id                  SERIAL PRIMARY KEY,
    business_id                INT NOT NULL REFERENCES Businesses(business_id),
    date_range                 VARCHAR(50) NOT NULL,
    low_ingredients_count      INT NOT NULL,
    total_sales_value          DECIMAL(10,2) NOT NULL,
    total_orders_count         INT NOT NULL,
    total_waste_value          DECIMAL(10,2) NOT NULL,
    top_selling_items_data     JSON,
    low_stock_ingredients_data JSON,
    estimated_low_stock_cost   DECIMAL(10,2),
    last_updated_at            TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


MODULE 4: INVENTORY CORE & SMART INVENTORY

4.1 GlobalUnits
CREATE TYPE unit_type_enum AS ENUM ('Weight','Volume','Count','Prepared Dish','Custom');
CREATE TABLE GlobalUnits (
    unit_id           SERIAL PRIMARY KEY,
    unit_name         VARCHAR(50) NOT NULL UNIQUE,
    unit_symbol       VARCHAR(10),
    unit_type         unit_type_enum,
    is_active         BOOLEAN NOT NULL DEFAULT TRUE,
    is_system_defined BOOLEAN NOT NULL DEFAULT FALSE,
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


4.2 BusinessUnitConversions
CREATE TABLE BusinessUnitConversions (
    conversion_id     SERIAL PRIMARY KEY,
    business_id       INT NOT NULL REFERENCES Businesses(business_id),
    from_unit_id      INT NOT NULL REFERENCES GlobalUnits(unit_id),
    to_unit_id        INT NOT NULL REFERENCES GlobalUnits(unit_id),
    conversion_factor DECIMAL(10,6) NOT NULL CHECK (conversion_factor>0),
    description       TEXT,
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


4.3 InventoryCategories
CREATE TABLE InventoryCategories (
    category_id SERIAL PRIMARY KEY,
    business_id INT NOT NULL REFERENCES Businesses(business_id),
    name        VARCHAR(100) NOT NULL,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


4.4 InventoryItems (ENHANCED)
CREATE TABLE InventoryItems (
    item_id              SERIAL PRIMARY KEY,
    business_id          INT NOT NULL REFERENCES Businesses(business_id),
    name                 VARCHAR(255) NOT NULL,
    category_id          INT REFERENCES InventoryCategories(category_id),
    standard_unit_id     INT NOT NULL REFERENCES GlobalUnits(unit_id),
    reorder_point        DECIMAL(10,2),
    safety_stock         DECIMAL(10,2),
    default_vendor_id    INT REFERENCES Vendors(vendor_id),
    track_expiry         BOOLEAN DEFAULT FALSE,
    shelf_life_days      INT,
    is_active            BOOLEAN DEFAULT TRUE,
    manual_abc_category  CHAR(1) CHECK (manual_abc_category IN ('A','B','C')),
    perishability_tag    VARCHAR(10) CHECK (perishability_tag IN ('High','Medium','Low')),
    manual_reorder_point DECIMAL(10,2),
    is_fully_mapped      BOOLEAN NOT NULL DEFAULT FALSE,
    is_in_stock          BOOLEAN NOT NULL DEFAULT FALSE,
    created_at           TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at           TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


4.5 ReorderPointCalculations (NEW)
CREATE TABLE ReorderPointCalculations (
    item_id                   INT PRIMARY KEY REFERENCES InventoryItems(item_id),
    average_daily_consumption DECIMAL(10,2) NOT NULL,
    average_lead_time_days    DECIMAL(10,2) NOT NULL,
    safety_stock_quantity     DECIMAL(10,2) NOT NULL,
    reorder_point_quantity    DECIMAL(10,2) NOT NULL,
    last_calculated_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


4.6 ABCAnalysisResults (NEW)
CREATE TABLE ABCAnalysisResults (
    analysis_id             SERIAL PRIMARY KEY,
    item_id                 INT NOT NULL REFERENCES InventoryItems(item_id),
    business_id             INT NOT NULL REFERENCES Businesses(business_id),
    start_date              DATE NOT NULL,
    end_date                DATE NOT NULL,
    total_consumption_value DECIMAL(10,2) NOT NULL,
    abc_category            CHAR(1) NOT NULL CHECK (abc_category IN ('A','B','C')),
    created_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


4.7 InventoryBatches
CREATE TABLE InventoryBatches (
    batch_id           SERIAL PRIMARY KEY,
    item_id            INT NOT NULL REFERENCES InventoryItems(item_id),
    quantity           DECIMAL(10,2) NOT NULL CHECK (quantity>=0),
    unit_cost          DECIMAL(10,2) NOT NULL CHECK (unit_cost>=0),
    expiry_date        DATE,
    manufacturing_date DATE,
    received_date      DATE NOT NULL,
    vendor_id          INT,
    invoice_reference  VARCHAR(100),
    is_expired         BOOLEAN DEFAULT FALSE,
    created_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


4.8 StockInRecords
CREATE TYPE stock_in_status_enum AS ENUM ('Draft','Submitted','Processing');
CREATE TYPE stock_in_entry_enum AS ENUM ('Scan Bill','Manual Entry','Upload Image');
CREATE TABLE StockInRecords (
    stock_in_id        SERIAL PRIMARY KEY,
    business_id        INT NOT NULL REFERENCES Businesses(business_id),
    received_by_user_id INT REFERENCES Users(user_id),
    received_date      DATE NOT NULL,
    vendor_id          INT,
    total_cost         DECIMAL(12,2),
    status             stock_in_status_enum DEFAULT 'Submitted',
    scanned_image_id   INT,
    bill_date          DATE,
    supplier_name_from_bill VARCHAR(255),
    entry_method       stock_in_entry_enum NOT NULL,
    created_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


4.9 StockInLineItems
CREATE TABLE StockInLineItems (
    line_item_id            SERIAL PRIMARY KEY,
    stock_in_id             INT NOT NULL REFERENCES StockInRecords(stock_in_id),
    item_id                 INT REFERENCES InventoryItems(item_id),
    raw_item_name_extracted VARCHAR(255) NOT NULL,
    quantity                DECIMAL(10,2) NOT NULL CHECK (quantity>0),
    unit_cost               DECIMAL(10,2) NOT NULL CHECK (unit_cost>=0),
    expiry_date             DATE,
    batch_id                INT REFERENCES InventoryBatches(batch_id),
    received_unit_id        INT NOT NULL REFERENCES GlobalUnits(unit_id),
    is_mapped_to_inventory  BOOLEAN DEFAULT FALSE,
    discrepancy_flag        BOOLEAN DEFAULT FALSE,
    created_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


4.10 StockOutRecords
CREATE TYPE stock_out_status_enum AS ENUM ('Draft','Confirmed');
CREATE TYPE item_source_enum AS ENUM ('InventoryItem', 'MenuItem');
CREATE TYPE stock_reason_enum AS ENUM ('Usage','Waste');
CREATE TABLE StockOutRecords (
    stock_out_id        SERIAL PRIMARY KEY,
    business_id         INT NOT NULL REFERENCES Businesses(business_id),
    item_id             INT NOT NULL,
    item_type           item_source_enum NOT NULL,
    quantity            DECIMAL(10,2) NOT NULL CHECK (quantity>0),
    unit_id             INT NOT NULL REFERENCES GlobalUnits(unit_id),
    reason_type         stock_reason_enum NOT NULL,
    waste_reason_id     INT,
    notes               TEXT,
    deducted_by_user_id INT REFERENCES Users(user_id),
    deducted_date       TIMESTAMP NOT NULL,
    production_date     DATE,
    shift               VARCHAR(50),
    estimated_cost_impact DECIMAL(12,2),
    status              stock_out_status_enum DEFAULT 'Confirmed',
    created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


4.11 WastageReasons (NEW)
CREATE TYPE waste_reason_cat_enum AS ENUM('Ingredient Waste', 'Dish Waste', 'General Waste');
CREATE TABLE WastageReasons (
    reason_id   SERIAL PRIMARY KEY,
    business_id INT NOT NULL REFERENCES Businesses(business_id),
    reason_label VARCHAR(100) NOT NULL,
    reason_category waste_reason_cat_enum,
    is_active   BOOLEAN DEFAULT TRUE,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


4.12 WastageRecords (UPDATED)
CREATE TABLE WastageRecords (
    wastage_id  SERIAL PRIMARY KEY,
    business_id INT NOT NULL REFERENCES Businesses(business_id),
    item_id     INT NOT NULL REFERENCES InventoryItems(item_id),
    quantity    DECIMAL(10,2) NOT NULL,
    reason_id   INT NOT NULL REFERENCES WastageReasons(reason_id),
    cost_impact DECIMAL(10,2),
    recorded_by_user_id INT REFERENCES Users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


End of MODULES 1-4.
Reply "continue" for Modules 5-8, which include Vendor Management, Purchase, Sales & OCR, Menu, Recipes, and Complimentary Items (with all DDLs and relationship descriptions).
MODULE 5: SMART INVENTORY/ABC & PROCUREMENT

5.1 ABCAnalysisResults (NEW, ABC Module)
Purpose: Historic record of system-calculated ABC category & consumption for each item per analysis period.
DDL:
CREATE TYPE abc_enum AS ENUM('A','B','C');
CREATE TABLE ABCAnalysisResults (
    analysis_id             SERIAL PRIMARY KEY,
    item_id                 INT NOT NULL REFERENCES InventoryItems(item_id),
    business_id             INT NOT NULL REFERENCES Businesses(business_id),
    start_date              DATE NOT NULL,
    end_date                DATE NOT NULL,
    total_consumption_value DECIMAL(10,2) NOT NULL,
    abc_category            abc_enum NOT NULL,
    created_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

Name
Type
Constraints
Description
analysis_id
SERIAL
PK
Record ID
item_id
INT
NOT NULL, FK ? InventoryItems
Evaluated item
business_id
INT
NOT NULL, FK ? Businesses
Context
start_date, end_date
DATE
NOT NULL
Period window
total_consumption_value
DECIMAL
NOT NULL
Qty � price over period
abc_category
abc_enum
NOT NULL
System's class
created_at
TIMESTAMP
DEFAULT CURRENT_TIMESTAMP
Audit


5.2 ReorderPointCalculations (from Module 4)
(Already defined above; here for context.)

MODULE 6: VENDOR & PROCUREMENT

6.1 Vendors (ENHANCED)
Purpose: All suppliers; performance and analytics included.
DDL:
CREATE TABLE Vendors (
    vendor_id      SERIAL PRIMARY KEY,
    business_id    INT NOT NULL REFERENCES Businesses(business_id),
    name           VARCHAR(255) NOT NULL,
    description    TEXT,
    contact_phone  VARCHAR(50),
    contact_email  VARCHAR(255),
    contact_whatsapp VARCHAR(50),
    address        TEXT,
    average_rating DECIMAL(3,1) CHECK (average_rating BETWEEN 0 AND 5),
    on_time_delivery_rate DECIMAL(5,2) CHECK (on_time_delivery_rate BETWEEN 0 AND 100),
    quality_score  DECIMAL(5,2) CHECK (quality_score BETWEEN 0 AND 100),
    last_order_date DATE,
    total_orders   INT NOT NULL DEFAULT 0,
    last_ordered_at TIMESTAMP,
    is_active      BOOLEAN DEFAULT TRUE,
    created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE (business_id, name)
);


6.2 VendorRatings (NEW)
CREATE TABLE VendorRatings (
    rating_id  SERIAL PRIMARY KEY,
    vendor_id  INT NOT NULL REFERENCES Vendors(vendor_id),
    rating     DECIMAL(2,1) NOT NULL CHECK (rating BETWEEN 1.0 AND 5.0),
    user_id    INT NOT NULL REFERENCES Users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


6.3 PurchaseOrders
CREATE TYPE po_status_enum AS ENUM('Draft','Submitted','Partially Received','Received','Cancelled');
CREATE TABLE PurchaseOrders (
    po_id                  SERIAL PRIMARY KEY,
    business_id            INT NOT NULL REFERENCES Businesses(business_id),
    vendor_id              INT NOT NULL REFERENCES Vendors(vendor_id),
    order_date             DATE NOT NULL,
    expected_delivery_date DATE,
    status                 po_status_enum DEFAULT 'Draft',
    created_by_user_id     INT NOT NULL REFERENCES Users(user_id),
    special_instructions   TEXT,
    total_amount           DECIMAL(12,2),
    total_items            INT,
    created_at             TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at             TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


6.4 PurchaseOrderLineItems
CREATE TABLE PurchaseOrderLineItems (
    po_line_item_id   SERIAL PRIMARY KEY,
    po_id             INT NOT NULL REFERENCES PurchaseOrders(po_id),
    item_id           INT NOT NULL REFERENCES InventoryItems(item_id),
    quantity_ordered  DECIMAL(10,2) NOT NULL CHECK (quantity_ordered>0),
    unit_id           INT NOT NULL REFERENCES GlobalUnits(unit_id),
    unit_price        DECIMAL(10,2) CHECK (unit_price>=0),
    total_line_amount DECIMAL(12,2),
    quantity_received DECIMAL(10,2) DEFAULT 0,
    is_fulfilled      BOOLEAN DEFAULT FALSE,
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


6.5 VendorBillsItems (ENHANCED)
CREATE TABLE VendorBillsItems (
    bill_item_id   SERIAL PRIMARY KEY,
    vendor_id      INT NOT NULL REFERENCES Vendors(vendor_id),
    item_id        INT NOT NULL REFERENCES InventoryItems(item_id),
    quantity       DECIMAL(10,2) NOT NULL,
    unit_price     DECIMAL(10,2) NOT NULL,
    received_at    TIMESTAMP NOT NULL,
    date_created   TIMESTAMP NOT NULL,
    created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


6.6 UpcomingPaymentsDue
CREATE TYPE payment_status_enum AS ENUM('Pending','Paid','Overdue');
CREATE TABLE UpcomingPaymentsDue (
    payment_due_id      SERIAL PRIMARY KEY,
    business_id         INT NOT NULL REFERENCES Businesses(business_id),
    vendor_id           INT NOT NULL REFERENCES Vendors(vendor_id),
    invoice_number      VARCHAR(100),
    amount_due          DECIMAL(12,2) NOT NULL CHECK (amount_due > 0),
    due_date            DATE NOT NULL,
    status              payment_status_enum DEFAULT 'Pending',
    payment_recorded_at TIMESTAMP,
    created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


MODULE 7: SALES MANAGEMENT & OCR

7.1 SalesTransactions
CREATE TYPE sales_status_enum AS ENUM('Pending Review','Confirmed','Deducted','Error');
CREATE TABLE SalesTransactions (
    sale_id              SERIAL PRIMARY KEY,
    business_id          INT NOT NULL REFERENCES Businesses(business_id),
    transaction_date     DATE NOT NULL,
    transaction_time     TIME,
    total_amount         DECIMAL(12,2) NOT NULL CHECK (total_amount >= 0),
    discount_amount      DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    tax_amount           DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    payment_method       VARCHAR(50),
    scanned_image_id     INT,
    processed_by_user_id INT,
    status               sales_status_enum DEFAULT 'Pending Review',
    created_at           TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at           TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


7.2 SaleLineItems
CREATE TABLE SaleLineItems (
    sale_line_item_id SERIAL PRIMARY KEY,
    sale_id           INT NOT NULL REFERENCES SalesTransactions(sale_id),
    menu_item_id      INT NOT NULL REFERENCES MenuItems(menu_item_id),
    quantity_sold     DECIMAL(10,2) NOT NULL CHECK (quantity_sold>0),
    unit_price        DECIMAL(10,2) NOT NULL CHECK (unit_price>=0),
    line_item_amount  DECIMAL(10,2) NOT NULL CHECK (line_item_amount>=0),
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


7.3 ScannedImages
CREATE TYPE scan_status_enum AS ENUM('Pending OCR', 'OCR Processed','Ready for Review','Reviewed','Error');
CREATE TYPE scan_type_enum AS ENUM('Sales Report','Vendor Bill','Menu','Other');
CREATE TABLE ScannedImages (
    image_id     SERIAL PRIMARY KEY,
    business_id  INT NOT NULL REFERENCES Businesses(business_id),
    file_url     VARCHAR(255) NOT NULL,
    upload_date  TIMESTAMP NOT NULL,
    scan_type    scan_type_enum NOT NULL,
    uploaded_by_user_id INT,
    status       scan_status_enum DEFAULT 'Pending OCR',
    created_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


7.4 ExtractedSalesReports
CREATE TABLE ExtractedSalesReports (
    extracted_report_id SERIAL PRIMARY KEY,
    scanned_image_id    INT NOT NULL REFERENCES ScannedImages(image_id),
    extracted_date      DATE,
    extracted_total_amount DECIMAL(12,2),
    extracted_total_orders INT,
    is_reviewed         BOOLEAN DEFAULT FALSE,
    is_confirmed        BOOLEAN DEFAULT FALSE,
    confirmed_by_user_id INT REFERENCES Users(user_id),
    confirmed_at        TIMESTAMP,
    linked_sale_id      INT REFERENCES SalesTransactions(sale_id),
    created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


7.5 ExtractedSalesLineItems
CREATE TABLE ExtractedSalesLineItems (
    extracted_line_id    SERIAL PRIMARY KEY,
    extracted_report_id  INT NOT NULL REFERENCES ExtractedSalesReports(extracted_report_id),
    line_number          INT NOT NULL,
    raw_item_name        VARCHAR(255) NOT NULL,
    raw_quantity         DECIMAL(10,2),
    raw_amount           DECIMAL(10,2),
    mapped_menu_item_id  INT REFERENCES MenuItems(menu_item_id),
    mapped_quantity      DECIMAL(10,2),
    created_at           TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at           TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


7.6 DailySaleReports (UPDATED for complimentary logic)
CREATE TABLE DailySaleReports (
    report_id                SERIAL PRIMARY KEY,
    business_id              INT NOT NULL REFERENCES Businesses(business_id),
    report_date              DATE NOT NULL UNIQUE,
    ocr_sales_data           JSON NOT NULL,
    complimentary_sales_data JSON NOT NULL,
    created_at               TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


7.7 InventoryTransactions (ENHANCED for type)
CREATE TYPE transaction_enum AS ENUM ('Sale','Wastage','Complimentary');
CREATE TABLE InventoryTransactions (
    transaction_id    SERIAL PRIMARY KEY,
    business_id       INT NOT NULL REFERENCES Businesses(business_id),
    item_id           INT NOT NULL REFERENCES InventoryItems(item_id),
    quantity          DECIMAL(10,2) NOT NULL,
    transaction_type  transaction_enum NOT NULL,
    related_report_id INT NOT NULL REFERENCES DailySaleReports(report_id),
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


MODULE 8: MENU, RECIPES & COMPLIMENTARY

8.1 MenuCategories
CREATE TABLE MenuCategories (
    category_id SERIAL PRIMARY KEY,
    business_id INT NOT NULL REFERENCES Businesses(business_id),
    name        VARCHAR(100) NOT NULL,
    is_active   BOOLEAN DEFAULT TRUE,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (business_id, name)
);


8.2 MenuItems
CREATE TABLE MenuItems (
    menu_item_id       SERIAL PRIMARY KEY,
    business_id        INT NOT NULL REFERENCES Businesses(business_id),
    name               VARCHAR(255) NOT NULL,
    category_id        INT REFERENCES MenuCategories(category_id),
    price              DECIMAL(10,2) NOT NULL CHECK (price>=0),
    servings_per_batch DECIMAL(10,2) NOT NULL DEFAULT 1,
    serving_unit_id    INT NOT NULL REFERENCES GlobalUnits(unit_id),
    image_url          VARCHAR(255),
    is_active          BOOLEAN NOT NULL DEFAULT TRUE,
    created_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


8.3 Recipes
CREATE TABLE Recipes (
    recipe_id  INT PRIMARY KEY REFERENCES MenuItems(menu_item_id),
    instructions TEXT,
    estimated_cost DECIMAL(10,2),
    prep_time_minutes INT,
    cook_time_minutes INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


8.4 RecipeIngredients
CREATE TABLE RecipeIngredients (
    recipe_ingredient_id SERIAL PRIMARY KEY,
    recipe_id INT NOT NULL REFERENCES Recipes(recipe_id),
    item_id   INT NOT NULL REFERENCES InventoryItems(item_id),
    quantity  DECIMAL(10,4) NOT NULL,
    unit_id   INT NOT NULL REFERENCES GlobalUnits(unit_id),
    notes     VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


8.5 ComplimentaryItemTemplates (NEW)
CREATE TABLE ComplimentaryItemTemplates (
    template_id         SERIAL PRIMARY KEY,
    business_type_id    INT NOT NULL REFERENCES BusinessTypes(type_id),
    item_name           VARCHAR(255) NOT NULL,
    unit_of_measurement VARCHAR(50) NOT NULL
);


8.6 BusinessComplimentaryItems (NEW, cross-mapping main dish/comp)
CREATE TABLE BusinessComplimentaryItems (
    bc_item_id            SERIAL PRIMARY KEY,
    business_id           INT NOT NULL REFERENCES Businesses(business_id),
    main_dish_item_id     INT NOT NULL REFERENCES InventoryItems(item_id),
    complimentary_item_id INT NOT NULL REFERENCES InventoryItems(item_id),
    standard_quantity     DECIMAL(10,2) NOT NULL,
    unit_of_measurement   VARCHAR(50) NOT NULL
);


End of MODULES 5-8.
Reply "continue" for Modules 9-12: Reporting & Analytics, Roles & Permissions, Settings & Tax/Admin, Subscription Management, and all advanced supporting structures and indexes.

MODULE 8: MENU, RECIPES & COMPLIMENTARY

8.1 MenuCategories
CREATE TABLE MenuCategories (
    category_id SERIAL PRIMARY KEY,
    business_id INT NOT NULL REFERENCES Businesses(business_id),
    name        VARCHAR(100) NOT NULL,
    is_active   BOOLEAN DEFAULT TRUE,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (business_id, name)
);

Column
Data Type
Constraints
Description
category_id
SERIAL
PK
Unique Menu Category
business_id
INT
NOT NULL, FK ? Businesses
Business owning this category
name
VARCHAR(100)
NOT NULL
Category name (e.g. Main Course)
is_active
BOOLEAN
DEFAULT TRUE
Active flag
created_at
TIMESTAMP
DEFAULT CURRENT_TIMESTAMP
Creation timestamp


8.2 MenuItems
CREATE TABLE MenuItems (
    menu_item_id       SERIAL PRIMARY KEY,
    business_id        INT NOT NULL REFERENCES Businesses(business_id),
    name               VARCHAR(255) NOT NULL,
    category_id        INT REFERENCES MenuCategories(category_id),
    price              DECIMAL(10,2) NOT NULL CHECK (price>=0),
    servings_per_batch DECIMAL(10,2) NOT NULL DEFAULT 1,
    serving_unit_id    INT NOT NULL REFERENCES GlobalUnits(unit_id),
    image_url          VARCHAR(255),
    is_active          BOOLEAN NOT NULL DEFAULT TRUE,
    created_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


8.3 Recipes
CREATE TABLE Recipes (
    recipe_id          INT PRIMARY KEY REFERENCES MenuItems(menu_item_id),
    instructions       TEXT,
    estimated_cost     DECIMAL(10,2),
    prep_time_minutes  INT,
    cook_time_minutes  INT,
    created_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


8.4 RecipeIngredients
CREATE TABLE RecipeIngredients (
    recipe_ingredient_id SERIAL PRIMARY KEY,
    recipe_id            INT NOT NULL REFERENCES Recipes(recipe_id),
    item_id              INT NOT NULL REFERENCES InventoryItems(item_id),
    quantity             DECIMAL(10,4) NOT NULL,
    unit_id              INT NOT NULL REFERENCES GlobalUnits(unit_id),
    notes                VARCHAR(255),
    created_at           TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at           TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


8.5 ComplimentaryItemTemplates
CREATE TABLE ComplimentaryItemTemplates (
    template_id         SERIAL PRIMARY KEY,
    business_type_id    INT NOT NULL REFERENCES BusinessTypes(type_id),
    item_name           VARCHAR(255) NOT NULL,
    unit_of_measurement VARCHAR(50) NOT NULL
);


8.6 BusinessComplimentaryItems
CREATE TABLE BusinessComplimentaryItems (
    bc_item_id            SERIAL PRIMARY KEY,
    business_id           INT NOT NULL REFERENCES Businesses(business_id),
    main_dish_item_id     INT NOT NULL REFERENCES InventoryItems(item_id),
    complimentary_item_id INT NOT NULL REFERENCES InventoryItems(item_id),
    standard_quantity     DECIMAL(10,2) NOT NULL,
    unit_of_measurement   VARCHAR(50) NOT NULL
);


MODULE 9: REPORTS & ANALYTICS

9.1 ReportRegistry
CREATE TYPE report_category_enum AS ENUM('Sales', 'Inventory', 'Wastage', 'Vendor', 'Financial', 'Data Health', 'Other');
CREATE TABLE ReportRegistry (
    report_id     SERIAL PRIMARY KEY,
    report_name   VARCHAR(150) NOT NULL UNIQUE,
    report_code   VARCHAR(100) NOT NULL UNIQUE,
    category      report_category_enum NOT NULL,
    description   TEXT,
    is_active     BOOLEAN DEFAULT TRUE,
    is_visualizable BOOLEAN DEFAULT TRUE,
    created_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


9.2 UserFavoriteReports
CREATE TABLE UserFavoriteReports (
    fav_id      SERIAL PRIMARY KEY,
    user_id     INT NOT NULL REFERENCES Users(user_id),
    report_id   INT NOT NULL REFERENCES ReportRegistry(report_id),
    business_id INT NOT NULL REFERENCES Businesses(business_id),
    marked_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


9.3 ReportAccessHistory
CREATE TABLE ReportAccessHistory (
    access_id    SERIAL PRIMARY KEY,
    report_id    INT NOT NULL REFERENCES ReportRegistry(report_id),
    user_id      INT NOT NULL REFERENCES Users(user_id),
    business_id  INT NOT NULL REFERENCES Businesses(business_id),
    access_time  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    action_type  VARCHAR(50) NOT NULL,
    filter_params JSON
);


9.4 ReportCategoryViewPreferences
CREATE TABLE ReportCategoryViewPreferences (
    pref_id      SERIAL PRIMARY KEY,
    user_id      INT NOT NULL REFERENCES Users(user_id),
    category     report_category_enum NOT NULL,
    is_expanded  BOOLEAN DEFAULT TRUE
);


9.5 ReportFilterHistory
CREATE TABLE ReportFilterHistory (
    filter_id    SERIAL PRIMARY KEY,
    user_id      INT NOT NULL REFERENCES Users(user_id),
    report_id    INT NOT NULL REFERENCES ReportRegistry(report_id),
    filter_key   VARCHAR(100) NOT NULL,
    filter_value VARCHAR(255) NOT NULL,
    applied_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


9.6 DataHealthMetrics
CREATE TYPE health_status_enum AS ENUM('Excellent','Good','Fair','Poor');
CREATE TABLE DataHealthMetrics (
    metric_id           SERIAL PRIMARY KEY,
    business_id         INT NOT NULL REFERENCES Businesses(business_id),
    module_name         VARCHAR(100) NOT NULL,
    report_period       VARCHAR(50) NOT NULL,
    start_date          DATE NOT NULL,
    end_date            DATE NOT NULL,
    accuracy_percentage DECIMAL(5,2) CHECK (accuracy_percentage BETWEEN 0 AND 100),
    health_status       health_status_enum,
    total_issues_found  INT NOT NULL DEFAULT 0,
    last_checked_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


9.7 UserReportViews
CREATE TABLE UserReportViews (
    view_id      SERIAL PRIMARY KEY,
    user_id      INT NOT NULL REFERENCES Users(user_id),
    business_id  INT NOT NULL REFERENCES Businesses(business_id),
    report_type  VARCHAR(50) NOT NULL,
    viewed_card  VARCHAR(100) NOT NULL,
    viewed_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


9.8 SalesReports
CREATE TABLE SalesReports (
    report_id          SERIAL PRIMARY KEY,
    business_id        INT NOT NULL REFERENCES Businesses(business_id),
    report_date        DATE NOT NULL UNIQUE,
    triggering_action  VARCHAR(100),
    total_sales        DECIMAL(12,2) DEFAULT 0,
    created_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


9.9 StockReports
CREATE TABLE StockReports (
    report_id          SERIAL PRIMARY KEY,
    business_id        INT NOT NULL REFERENCES Businesses(business_id),
    report_date        DATE NOT NULL UNIQUE,
    triggering_action  VARCHAR(100),
    total_items        INT DEFAULT 0,
    low_stock_items    INT DEFAULT 0,
    created_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


9.10 QuickReports
CREATE TABLE QuickReports (
    report_id                  SERIAL PRIMARY KEY,
    business_id                INT NOT NULL REFERENCES Businesses(business_id),
    date_range                 VARCHAR(50) NOT NULL,
    low_ingredients_count      INT NOT NULL,
    total_sales_value          DECIMAL(10,2) NOT NULL,
    total_orders_count         INT NOT NULL,
    total_waste_value          DECIMAL(10,2) NOT NULL,
    top_selling_items_data     JSON,
    low_stock_ingredients_data JSON,
    estimated_low_stock_cost   DECIMAL(10,2),
    last_updated_at            TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


MODULE 10: ROLES & PERMISSIONS

10.1 Roles
CREATE TABLE Roles (
    role_id      SERIAL PRIMARY KEY,
    business_id  INT NOT NULL REFERENCES Businesses(business_id),
    role_name    VARCHAR(100) NOT NULL,
    description  TEXT,
    is_system_default BOOLEAN NOT NULL DEFAULT FALSE,
    is_active    BOOLEAN NOT NULL DEFAULT TRUE,
    created_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE (business_id, role_name)
);


10.2 Permissions
CREATE TABLE Permissions (
    permission_id   SERIAL PRIMARY KEY,
    permission_name VARCHAR(100) NOT NULL UNIQUE,
    module_name     VARCHAR(100) NOT NULL,
    description     TEXT,
    is_active       BOOLEAN NOT NULL DEFAULT TRUE
);


10.3 RolePermissions
CREATE TABLE RolePermissions (
    role_id       INT NOT NULL REFERENCES Roles(role_id),
    permission_id INT NOT NULL REFERENCES Permissions(permission_id),
    created_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (role_id, permission_id)
);


MODULE 11: SETTINGS & ADMINISTRATION

11.1 BusinessSettings
CREATE TYPE setting_data_enum AS ENUM('string', 'boolean', 'number', 'json');
CREATE TABLE BusinessSettings (
    setting_id      SERIAL PRIMARY KEY,
    business_id     INT NOT NULL REFERENCES Businesses(business_id),
    setting_key     VARCHAR(100) NOT NULL,
    setting_value   TEXT,
    data_type       setting_data_enum NOT NULL,
    module_scope    VARCHAR(50),
    description     TEXT,
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE (business_id, setting_key)
);


11.2 LocationSettings
CREATE TABLE LocationSettings (
    loc_setting_id  SERIAL PRIMARY KEY,
    location_id     INT NOT NULL REFERENCES BusinessLocations(location_id),
    setting_key     VARCHAR(100) NOT NULL,
    setting_value   TEXT,
    data_type       setting_data_enum NOT NULL,
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


11.3 TaxRates
CREATE TABLE TaxRates (
    tax_rate_id             SERIAL PRIMARY KEY,
    business_id             INT NOT NULL REFERENCES Businesses(business_id),
    tax_name                VARCHAR(100) NOT NULL,
    rate_percentage         DECIMAL(5,2) NOT NULL CHECK (rate_percentage>=0),
    is_active               BOOLEAN NOT NULL DEFAULT TRUE,
    applies_to_category_id  INT REFERENCES MenuCategories(category_id),
    created_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


11.4 PaymentMethods
CREATE TABLE PaymentMethods (
    payment_method_id SERIAL PRIMARY KEY,
    business_id       INT NOT NULL REFERENCES Businesses(business_id),
    method_name       VARCHAR(100) NOT NULL,
    description       TEXT,
    is_active         BOOLEAN NOT NULL DEFAULT TRUE,
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


MODULE 12: SUBSCRIPTIONS & PLAN MANAGEMENT

12.1 SubscriptionPlans
CREATE TABLE SubscriptionPlans (
    plan_id             SERIAL PRIMARY KEY,
    plan_name           VARCHAR(100) NOT NULL UNIQUE,
    description         TEXT,
    base_price_monthly  DECIMAL(10,2) NOT NULL CHECK (base_price_monthly>=0),
    base_price_annually DECIMAL(10,2) CHECK (base_price_annually>=0),
    max_users_included  INT,
    is_active           BOOLEAN NOT NULL DEFAULT TRUE,
    is_recommended      BOOLEAN DEFAULT FALSE,
    is_most_popular     BOOLEAN DEFAULT FALSE,
    created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


12.2 PlanFeatures
CREATE TABLE PlanFeatures (
    feature_id          SERIAL PRIMARY KEY,
    plan_id             INT NOT NULL REFERENCES SubscriptionPlans(plan_id),
    feature_name        VARCHAR(255) NOT NULL,
    feature_description TEXT,
    is_active           BOOLEAN NOT NULL DEFAULT TRUE,
    created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


12.3 BusinessSubscriptions
CREATE TYPE billing_cycle_enum AS ENUM('Monthly','Annually');
CREATE TYPE subscription_status_enum AS ENUM('Active','Suspended','Expired','Cancelled');
CREATE TABLE BusinessSubscriptions (
    subscription_id     SERIAL PRIMARY KEY,
    business_id         INT NOT NULL REFERENCES Businesses(business_id),
    plan_id             INT NOT NULL REFERENCES SubscriptionPlans(plan_id),
    start_date          DATE NOT NULL,
    end_date            DATE,
    billing_cycle       billing_cycle_enum NOT NULL,
    current_price       DECIMAL(10,2) NOT NULL CHECK (current_price>=0),
    status              subscription_status_enum NOT NULL DEFAULT 'Active',
    last_billed_date    DATE,
    next_billing_date   DATE,
    created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


MODULE 13: PRODUCTION PLANNING & FORECASTING

13.1 EstimatedProductionPlans
Purpose: Daily production estimates with AI/hybrid forecasting capabilities
DDL:
CREATE TYPE forecasting_method_enum AS ENUM('Manual','Hybrid_Forecast','Moving_Average','Same_Day_Average');
CREATE TABLE EstimatedProductionPlans (
    plan_id                 SERIAL PRIMARY KEY,
    business_id             INT NOT NULL REFERENCES Businesses(business_id),
    report_date             DATE NOT NULL,
    menu_item_id            INT NOT NULL REFERENCES MenuItems(menu_item_id),
    estimated_quantity      DECIMAL(10,2) NOT NULL CHECK (estimated_quantity >= 0),
    forecasting_method      forecasting_method_enum NOT NULL DEFAULT 'Manual',
    short_term_average      DECIMAL(10,2), -- 70% weight component (3-5 days average)
    same_day_average        DECIMAL(10,2), -- 30% weight component (same weekday average)
    manual_adjustment       DECIMAL(10,2) DEFAULT 0, -- Owner's manual adjustment
    is_confirmed            BOOLEAN NOT NULL DEFAULT FALSE,
    confirmation_timestamp  TIMESTAMP,
    confirmed_by_user_id    INT REFERENCES Users(user_id),
    created_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (business_id, report_date, menu_item_id)
);

Column
Data Type
Constraints
Description
plan_id
SERIAL
PK
Unique production plan ID
business_id
INT
NOT NULL, FK → Businesses
Business owning this plan
report_date
DATE
NOT NULL
Date for which production is planned
menu_item_id
INT
NOT NULL, FK → MenuItems
Menu item being planned
estimated_quantity
DECIMAL(10,2)
NOT NULL, CHECK >= 0
Estimated quantity to produce
forecasting_method
forecasting_method_enum
NOT NULL, DEFAULT 'Manual'
Method used for estimation
short_term_average
DECIMAL(10,2)
NULL
3-5 day moving average (70% weight)
same_day_average
DECIMAL(10,2)
NULL
Same weekday historical average (30% weight)
manual_adjustment
DECIMAL(10,2)
DEFAULT 0
Owner's manual override amount
is_confirmed
BOOLEAN
NOT NULL, DEFAULT FALSE
Whether plan is confirmed by owner
confirmation_timestamp
TIMESTAMP
NULL
When plan was confirmed
confirmed_by_user_id
INT
FK → Users
User who confirmed the plan


13.2 ProductionPlanHistory
Purpose: Historical tracking of production estimates vs actual results for accuracy analysis
DDL:
CREATE TABLE ProductionPlanHistory (
    history_id            SERIAL PRIMARY KEY,
    business_id           INT NOT NULL REFERENCES Businesses(business_id),
    menu_item_id          INT NOT NULL REFERENCES MenuItems(menu_item_id),
    plan_date             DATE NOT NULL,
    estimated_quantity    DECIMAL(10,2) NOT NULL,
    actual_sales_quantity DECIMAL(10,2),
    actual_waste_quantity DECIMAL(10,2) DEFAULT 0,
    variance_percentage   DECIMAL(5,2), -- (actual - estimated) / estimated * 100
    accuracy_score        DECIMAL(5,2), -- Model accuracy tracking
    created_at            TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

Column
Data Type
Constraints
Description
history_id
SERIAL
PK
Unique history record ID
business_id
INT
NOT NULL, FK → Businesses
Business context
menu_item_id
INT
NOT NULL, FK → MenuItems
Menu item tracked
plan_date
DATE
NOT NULL
Date of the production plan
estimated_quantity
DECIMAL(10,2)
NOT NULL
Originally estimated quantity
actual_sales_quantity
DECIMAL(10,2)
NULL
Actual quantity sold
actual_waste_quantity
DECIMAL(10,2)
DEFAULT 0
Actual quantity wasted
variance_percentage
DECIMAL(5,2)
NULL
Percentage variance from estimate
accuracy_score
DECIMAL(5,2)
NULL
Model accuracy score


13.3 ForecastingModelMetrics
Purpose: Track forecasting model performance and accuracy over time
DDL:
CREATE TABLE ForecastingModelMetrics (
    metric_id               SERIAL PRIMARY KEY,
    business_id             INT NOT NULL REFERENCES Businesses(business_id),
    menu_item_id            INT NOT NULL REFERENCES MenuItems(menu_item_id),
    evaluation_period_start DATE NOT NULL,
    evaluation_period_end   DATE NOT NULL,
    avg_accuracy_percentage DECIMAL(5,2), -- Average prediction accuracy
    mean_absolute_error     DECIMAL(10,2), -- MAE
    short_term_weight       DECIMAL(3,2) DEFAULT 0.70, -- Current model weights
    same_day_weight         DECIMAL(3,2) DEFAULT 0.30,
    total_predictions       INT NOT NULL DEFAULT 0,
    successful_predictions  INT NOT NULL DEFAULT 0,
    created_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

Column
Data Type
Constraints
Description
metric_id
SERIAL
PK
Unique metric record ID
business_id
INT
NOT NULL, FK → Businesses
Business context
menu_item_id
INT
NOT NULL, FK → MenuItems
Menu item being evaluated
evaluation_period_start
DATE
NOT NULL
Start date of evaluation period
evaluation_period_end
DATE
NOT NULL
End date of evaluation period
avg_accuracy_percentage
DECIMAL(5,2)
NULL
Average prediction accuracy
mean_absolute_error
DECIMAL(10,2)
NULL
Mean Absolute Error (MAE)
short_term_weight
DECIMAL(3,2)
DEFAULT 0.70
Weight for short-term average
same_day_weight
DECIMAL(3,2)
DEFAULT 0.30
Weight for same-day average
total_predictions
INT
NOT NULL, DEFAULT 0
Total number of predictions made
successful_predictions
INT
NOT NULL, DEFAULT 0
Number of accurate predictions


13.4 DailyProductionInsights
Purpose: Daily profit/loss analysis and AI-generated suggestions for production optimization
DDL:
CREATE TABLE DailyProductionInsights (
    insight_id                  SERIAL PRIMARY KEY,
    business_id                 INT NOT NULL REFERENCES Businesses(business_id),
    report_date                 DATE NOT NULL,
    total_estimated_revenue     DECIMAL(12,2) NOT NULL DEFAULT 0,
    total_actual_revenue        DECIMAL(12,2) NOT NULL DEFAULT 0,
    total_estimated_cost        DECIMAL(12,2) NOT NULL DEFAULT 0,
    total_actual_cost           DECIMAL(12,2) NOT NULL DEFAULT 0,
    estimated_profit            DECIMAL(12,2) NOT NULL DEFAULT 0,
    actual_profit               DECIMAL(12,2) NOT NULL DEFAULT 0,
    profit_variance_percentage  DECIMAL(5,2), -- (actual - estimated) / estimated * 100
    high_variance_items         JSON, -- Items with >20% variance
    suggested_adjustments       JSON, -- AI-generated suggestions
    created_at                  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (business_id, report_date)
);

Column
Data Type
Constraints
Description
insight_id
SERIAL
PK
Unique insight record ID
business_id
INT
NOT NULL, FK → Businesses
Business context
report_date
DATE
NOT NULL
Date of the insights
total_estimated_revenue
DECIMAL(12,2)
NOT NULL, DEFAULT 0
Total estimated revenue for the day
total_actual_revenue
DECIMAL(12,2)
NOT NULL, DEFAULT 0
Total actual revenue achieved
total_estimated_cost
DECIMAL(12,2)
NOT NULL, DEFAULT 0
Total estimated production cost
total_actual_cost
DECIMAL(12,2)
NOT NULL, DEFAULT 0
Total actual production cost
estimated_profit
DECIMAL(12,2)
NOT NULL, DEFAULT 0
Estimated profit (revenue - cost)
actual_profit
DECIMAL(12,2)
NOT NULL, DEFAULT 0
Actual profit achieved
profit_variance_percentage
DECIMAL(5,2)
NULL
Percentage variance in profit
high_variance_items
JSON
NULL
Items with >20% variance (stored as JSON)
suggested_adjustments
JSON
NULL
AI-generated optimization suggestions


STRATEGIC INDEXES FOR PRODUCTION PLANNING:

-- Production Planning Performance Indexes
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_estimated_plans_business_date ON EstimatedProductionPlans(business_id, report_date);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_estimated_plans_confirmed ON EstimatedProductionPlans(business_id, is_confirmed);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_production_history_item_date ON ProductionPlanHistory(menu_item_id, plan_date);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_production_insights_date ON DailyProductionInsights(business_id, report_date);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_forecasting_metrics_item ON ForecastingModelMetrics(business_id, menu_item_id);


MODULE 14: USAGE EVENTS & PRODUCTION TRACKING (NEW)

14.1 UsageEvents
Purpose: Complete production tracking system for daily kitchen operations and shift management
DDL:
CREATE TABLE UsageEvents (
    event_id             UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    business_id          INT NOT NULL REFERENCES Businesses(business_id),
    production_date      DATE NOT NULL,
    shift                VARCHAR(255) NOT NULL,
    notes                TEXT,
    status               VARCHAR(20) NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'submitted')),
    created_by_user_id   INT REFERENCES Users(user_id),
    submitted_by_user_id INT REFERENCES Users(user_id),
    submitted_at         TIMESTAMP,
    created_at           TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at           TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

Column Dictionary:
event_id             | UUID         | PK, DEFAULT gen_random_uuid() | Unique production event identifier
business_id          | INT          | NOT NULL, FK → Businesses     | Business owning this event
production_date      | DATE         | NOT NULL                      | Date of production
shift                | VARCHAR(255) | NOT NULL                      | Production shift (e.g., Morning, Evening)
notes                | TEXT         | NULL                          | Additional event notes
status               | VARCHAR(20)  | NOT NULL, DEFAULT 'draft'     | Event workflow status
created_by_user_id   | INT          | FK → Users                    | User who created the event
submitted_by_user_id | INT          | FK → Users                    | User who submitted the event
submitted_at         | TIMESTAMP    | NULL                          | Timestamp when event was submitted
created_at           | TIMESTAMP    | NOT NULL, DEFAULT NOW()       | Event creation time
updated_at           | TIMESTAMP    | NOT NULL, DEFAULT NOW()       | Last update time


14.2 UsageItems
Purpose: Individual dish production records within a usage event
DDL:
CREATE TABLE UsageItems (
    usage_item_id    UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id         UUID NOT NULL REFERENCES UsageEvents(event_id) ON DELETE CASCADE,
    dish_id          INT NOT NULL REFERENCES MenuItems(menu_item_id),
    quantity_produced INT NOT NULL CHECK (quantity_produced > 0),
    unit             VARCHAR(255) NOT NULL,
    notes            TEXT,
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

Column Dictionary:
usage_item_id    | UUID         | PK, DEFAULT gen_random_uuid() | Unique usage item identifier
event_id         | UUID         | NOT NULL, FK → UsageEvents    | Parent usage event
dish_id          | INT          | NOT NULL, FK → MenuItems      | Menu item being produced
quantity_produced| INT          | NOT NULL, CHECK > 0           | Number of dishes produced
unit             | VARCHAR(255) | NOT NULL                      | Unit of production (plates, servings, etc.)
notes            | TEXT         | NULL                          | Item-specific production notes
created_at       | TIMESTAMP    | NOT NULL, DEFAULT NOW()       | Item creation time
updated_at       | TIMESTAMP    | NOT NULL, DEFAULT NOW()       | Last update time


14.3 UsageEventImages
Purpose: Link production evidence photos to usage events
DDL:
CREATE TABLE UsageEventImages (
    usage_image_id SERIAL PRIMARY KEY,
    event_id       UUID NOT NULL REFERENCES UsageEvents(event_id) ON DELETE CASCADE,
    image_id       INT NOT NULL REFERENCES ScannedImages(image_id),
    image_type     VARCHAR(50) DEFAULT 'Production Evidence',
    created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

Column Dictionary:
usage_image_id | SERIAL       | PK                            | Unique image link identifier
event_id       | UUID         | NOT NULL, FK → UsageEvents    | Parent usage event
image_id       | INT          | NOT NULL, FK → ScannedImages  | Reference to uploaded image
image_type     | VARCHAR(50)  | DEFAULT 'Production Evidence' | Type of production evidence
created_at     | TIMESTAMP    | DEFAULT NOW()                 | Link creation time


14.4 IngredientUsageEstimations
Purpose: Store estimated ingredient usage from production events (NO stock deduction)
DDL:
CREATE TABLE IngredientUsageEstimations (
    estimation_id               SERIAL PRIMARY KEY,
    business_id                 INT NOT NULL REFERENCES Businesses(business_id),
    usage_event_id              UUID NOT NULL REFERENCES UsageEvents(event_id) ON DELETE CASCADE,
    dish_id                     INT NOT NULL REFERENCES MenuItems(menu_item_id),
    ingredient_id               INT NOT NULL REFERENCES InventoryItems(item_id),
    quantity_produced           INT NOT NULL,
    estimated_ingredient_quantity DECIMAL(10,4) NOT NULL,
    unit_id                     INT NOT NULL REFERENCES GlobalUnits(unit_id),
    production_date             DATE NOT NULL,
    shift                       VARCHAR(255) NOT NULL,
    estimated_cost              DECIMAL(10,2),
    notes                       TEXT,
    created_at                  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_user_id          INT REFERENCES Users(user_id)
);

Column Dictionary:
estimation_id               | SERIAL       | PK                         | Unique estimation identifier
business_id                 | INT          | NOT NULL, FK → Businesses  | Business context
usage_event_id              | UUID         | NOT NULL, FK → UsageEvents | Parent usage event
dish_id                     | INT          | NOT NULL, FK → MenuItems   | Menu item produced
ingredient_id               | INT          | NOT NULL, FK → Inventory   | Ingredient used in recipe
quantity_produced           | INT          | NOT NULL                   | Number of dishes produced
estimated_ingredient_quantity| DECIMAL(10,4)| NOT NULL                   | Calculated ingredient usage
unit_id                     | INT          | NOT NULL, FK → GlobalUnits | Unit of measurement
production_date             | DATE         | NOT NULL                   | Date of production
shift                       | VARCHAR(255) | NOT NULL                   | Production shift
estimated_cost              | DECIMAL(10,2)| NULL                       | Estimated cost of ingredient usage
notes                       | TEXT         | NULL                       | Estimation notes
created_at                  | TIMESTAMP    | DEFAULT NOW()              | Estimation creation time
created_by_user_id          | INT          | FK → Users                 | User who created estimation


MODULE 15: ENHANCED IMAGE MANAGEMENT (NEW)

15.1 ScannedImages (ENHANCED)
Purpose: Comprehensive image management for all business operations
DDL:
CREATE TABLE ScannedImages (
    image_id          SERIAL PRIMARY KEY,
    business_id       INT NOT NULL REFERENCES Businesses(business_id),
    file_url          VARCHAR(255) NOT NULL,
    file_path         VARCHAR(500),
    thumbnail_url     VARCHAR(255),
    upload_date       TIMESTAMP NOT NULL,
    scan_type         scan_type_enum NOT NULL,
    uploaded_by_user_id INT REFERENCES Users(user_id),
    status            scan_status_enum DEFAULT 'Uploaded',
    file_size         INT,
    mime_type         VARCHAR(100),
    alt_text          VARCHAR(255),
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Enhanced scan_type_enum includes:
CREATE TYPE scan_type_enum AS ENUM('Sales Report','Vendor Bill','Menu','Menu Item','Stock Out','Usage Event','Other');

-- Enhanced scan_status_enum includes:
CREATE TYPE scan_status_enum AS ENUM('Pending OCR','OCR Processed','Ready for Review','Reviewed','Uploaded','Error');

Column Dictionary (Enhanced):
image_id          | SERIAL       | PK                         | Unique image identifier
business_id       | INT          | NOT NULL, FK → Businesses  | Business owning this image
file_url          | VARCHAR(255) | NOT NULL                   | Public URL of the image
file_path         | VARCHAR(500) | NULL (NEW)                 | Physical file storage path
thumbnail_url     | VARCHAR(255) | NULL (NEW)                 | Thumbnail image URL
upload_date       | TIMESTAMP    | NOT NULL                   | When image was uploaded
scan_type         | ENUM         | NOT NULL (ENHANCED)        | Type of image (enhanced with new types)
uploaded_by_user_id| INT          | FK → Users                 | User who uploaded the image
status            | ENUM         | DEFAULT 'Uploaded' (ENH)   | Processing status (enhanced)
file_size         | INT          | NULL (NEW)                 | File size in bytes
mime_type         | VARCHAR(100) | NULL (NEW)                 | MIME type (image/jpeg, etc.)
alt_text          | VARCHAR(255) | NULL (NEW)                 | Accessibility description
created_at        | TIMESTAMP    | DEFAULT NOW()              | Record creation time
updated_at        | TIMESTAMP    | DEFAULT NOW()              | Last update time


15.2 StockOutRecords (ENHANCED)
Purpose: Stock deduction records with image evidence support
DDL (Enhanced columns added):
ALTER TABLE StockOutRecords 
ADD COLUMN IF NOT EXISTS image_id INT REFERENCES ScannedImages(image_id),
ADD COLUMN IF NOT EXISTS usage_event_id UUID REFERENCES UsageEvents(event_id);

Enhanced Column Dictionary:
image_id       | INT  | FK → ScannedImages (NEW) | Evidence photo for stock out
usage_event_id | UUID | FK → UsageEvents (NEW)   | Link to related usage event


ADVANCED TRIGGERS & AUTOMATION:

-- Automatic Ingredient Usage Estimation Trigger
CREATE OR REPLACE FUNCTION process_usage_event_submission()
RETURNS TRIGGER AS $$
DECLARE
    usage_item RECORD;
    recipe_ingredient RECORD;
    total_ingredient_needed DECIMAL(10,4);
    estimated_cost DECIMAL(10,2);
BEGIN
    -- Only process when status changes to 'submitted'
    IF NEW.status = 'submitted' AND OLD.status = 'draft' THEN
        -- Loop through each dish in the usage event
        FOR usage_item IN 
            SELECT * FROM UsageItems WHERE event_id = NEW.event_id
        LOOP
            -- Loop through each ingredient for this dish
            FOR recipe_ingredient IN
                SELECT ri.*, ii.name as ingredient_name, 
                       COALESCE(AVG(ib.unit_cost), 0) as avg_cost
                FROM RecipeIngredients ri
                JOIN InventoryItems ii ON ri.item_id = ii.item_id
                LEFT JOIN InventoryBatches ib ON ii.item_id = ib.item_id AND ib.quantity > 0
                WHERE ri.recipe_id = usage_item.dish_id
                GROUP BY ri.recipe_ingredient_id, ri.recipe_id, ri.item_id, ri.quantity, 
                         ri.unit_id, ri.notes, ii.name
            LOOP
                -- Calculate total ingredient needed
                total_ingredient_needed := recipe_ingredient.quantity * usage_item.quantity_produced;
                
                -- Calculate estimated cost
                estimated_cost := total_ingredient_needed * COALESCE(recipe_ingredient.avg_cost, 0);
                
                -- Store ingredient usage estimation (NOT actual deduction)
                INSERT INTO IngredientUsageEstimations (
                    business_id, usage_event_id, dish_id, ingredient_id,
                    quantity_produced, estimated_ingredient_quantity, unit_id,
                    production_date, shift, estimated_cost, notes, created_by_user_id
                ) VALUES (
                    NEW.business_id, NEW.event_id, usage_item.dish_id, recipe_ingredient.item_id,
                    usage_item.quantity_produced, total_ingredient_needed, recipe_ingredient.unit_id,
                    NEW.production_date, NEW.shift, estimated_cost,
                    FORMAT('Estimated usage for %s units of %s', usage_item.quantity_produced, 
                           (SELECT name FROM MenuItems WHERE menu_item_id = usage_item.dish_id)),
                    NEW.submitted_by_user_id
                );
            END LOOP;
        END LOOP;
        
        -- Update submitted timestamp
        NEW.submitted_at = CURRENT_TIMESTAMP;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger
CREATE TRIGGER trigger_process_usage_event_submission
BEFORE UPDATE ON UsageEvents
FOR EACH ROW EXECUTE FUNCTION process_usage_event_submission();


ENHANCED VIEWS & REPORTING:

-- Usage Events Summary View
CREATE OR REPLACE VIEW UsageEventsSummary AS
SELECT
    ue.event_id,
    ue.business_id,
    ue.production_date,
    ue.shift,
    ue.status,
    ue.created_by_user_id,
    u.name as created_by_name,
    COUNT(ui.usage_item_id) as total_dishes,
    SUM(ui.quantity_produced) as total_quantity_produced,
    COUNT(uei.image_id) as total_images,
    ue.created_at,
    ue.submitted_at
FROM UsageEvents ue
LEFT JOIN Users u ON ue.created_by_user_id = u.user_id
LEFT JOIN UsageItems ui ON ue.event_id = ui.event_id
LEFT JOIN UsageEventImages uei ON ue.event_id = uei.event_id
GROUP BY ue.event_id, ue.business_id, ue.production_date, ue.shift, ue.status, 
         ue.created_by_user_id, u.name, ue.created_at, ue.submitted_at;

-- Production Summary View
CREATE OR REPLACE VIEW ProductionSummary AS
SELECT
    ui.event_id,
    ui.dish_id,
    mi.name as dish_name,
    mi.price as dish_price,
    ui.quantity_produced,
    ui.unit,
    (ui.quantity_produced * mi.price) as estimated_revenue,
    ue.production_date,
    ue.shift,
    ue.business_id
FROM UsageItems ui
JOIN UsageEvents ue ON ui.event_id = ue.event_id
JOIN MenuItems mi ON ui.dish_id = mi.menu_item_id
WHERE ue.status = 'submitted';

-- Ingredient Usage Summary View
CREATE OR REPLACE VIEW IngredientUsageSummary AS
SELECT
    iue.estimation_id,
    iue.business_id,
    iue.usage_event_id,
    ue.production_date,
    ue.shift,
    ue.status as event_status,
    mi.name as dish_name,
    ii.name as ingredient_name,
    iue.quantity_produced,
    iue.estimated_ingredient_quantity,
    gu.unit_name,
    iue.estimated_cost,
    iue.notes,
    u.name as created_by_name,
    iue.created_at
FROM IngredientUsageEstimations iue
JOIN UsageEvents ue ON iue.usage_event_id = ue.event_id
JOIN MenuItems mi ON iue.dish_id = mi.menu_item_id
JOIN InventoryItems ii ON iue.ingredient_id = ii.item_id
JOIN GlobalUnits gu ON iue.unit_id = gu.unit_id
LEFT JOIN Users u ON iue.created_by_user_id = u.user_id;

-- Menu Items With Images View
CREATE OR REPLACE VIEW MenuItemsWithImages AS
SELECT
    mi.menu_item_id,
    mi.business_id,
    mi.name,
    mi.price,
    mi.image_url,
    mi.is_active,
    mc.name as category_name,
    si.image_id,
    si.thumbnail_url,
    si.alt_text,
    si.file_size,
    si.mime_type
FROM MenuItems mi
LEFT JOIN MenuCategories mc ON mi.category_id = mc.category_id
LEFT JOIN ScannedImages si ON mi.image_url = si.file_url AND si.scan_type = 'Menu Item'
WHERE mi.is_active = true;

-- Stock Out Summary View with Evidence Images
CREATE OR REPLACE VIEW StockOutSummaryWithImages AS
SELECT
    sor.stock_out_id,
    sor.business_id,
    sor.item_id,
    ii.name as item_name,
    sor.quantity,
    gu.unit_name,
    sor.reason_type,
    wr.reason_label,
    sor.deducted_date,
    sor.production_date,
    sor.shift,
    sor.notes,
    u.name as deducted_by_name,
    si.file_url as evidence_image_url,
    si.thumbnail_url as evidence_thumbnail_url,
    ue.event_id as related_usage_event
FROM StockOutRecords sor
LEFT JOIN InventoryItems ii ON sor.item_id = ii.item_id
LEFT JOIN GlobalUnits gu ON sor.unit_id = gu.unit_id
LEFT JOIN WastageReasons wr ON sor.waste_reason_id = wr.reason_id
LEFT JOIN Users u ON sor.deducted_by_user_id = u.user_id
LEFT JOIN ScannedImages si ON sor.image_id = si.image_id
LEFT JOIN UsageEvents ue ON sor.usage_event_id = ue.event_id;


STRATEGIC INDEXES FOR USAGE EVENTS & IMAGE MANAGEMENT:

-- Usage Events Performance Indexes
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_usage_events_business_date ON UsageEvents(business_id, production_date);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_usage_events_status ON UsageEvents(business_id, status);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_usage_events_shift ON UsageEvents(business_id, shift);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_usage_items_event ON UsageItems(event_id);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_usage_items_dish ON UsageItems(dish_id);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_usage_event_images_event ON UsageEventImages(event_id);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_usage_event_images_image ON UsageEventImages(image_id);

-- Ingredient Usage Estimation Indexes
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_ingredient_estimations_business_date ON IngredientUsageEstimations(business_id, production_date);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_ingredient_estimations_event ON IngredientUsageEstimations(usage_event_id);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_ingredient_estimations_dish ON IngredientUsageEstimations(dish_id);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_ingredient_estimations_ingredient ON IngredientUsageEstimations(ingredient_id);

-- Enhanced Image Management Indexes
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_scanned_images_scan_type ON ScannedImages(business_id, scan_type);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_scanned_images_status ON ScannedImages(business_id, status);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_stock_out_usage_event ON StockOutRecords(usage_event_id);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_stock_out_image ON StockOutRecords(image_id);


NEW PERMISSIONS FOR USAGE EVENTS & IMAGE MANAGEMENT:

INSERT INTO Permissions (permission_name, module_name, description, is_active) VALUES
('can_create_usage_events', 'Production', 'Create and manage usage events', true),
('can_view_usage_events', 'Production', 'View usage events and production data', true),
('can_submit_usage_events', 'Production', 'Submit usage events for processing', true),
('can_upload_images', 'Images', 'Upload and manage images', true),
('can_manage_menu_item_images', 'Menu', 'Manage menu item images', true),
('can_view_production_analytics', 'Reports', 'Access production efficiency reports', true);

NEW REPORTS FOR USAGE EVENTS & PRODUCTION:

INSERT INTO ReportRegistry (report_name, report_code, category, description, is_active, is_visualizable) VALUES
('Production Efficiency Report', 'production_efficiency_report', 'Production', 'Daily production and ingredient usage analysis', true, true),
('Usage Events Summary', 'usage_events_summary', 'Production', 'Summary of all production events', true, true),
('Dish Production Report', 'dish_production_report', 'Production', 'Production volume by dish type', true, true),
('Menu Item Image Report', 'menu_item_image_report', 'Inventory', 'Menu items with missing images', true, false),
('Stock Out Visual Report', 'stock_out_visual_report', 'Inventory', 'Stock out records with evidence images', true, true),
('Recipe Cost Analysis', 'recipe_cost_analysis', 'Financial', 'Cost breakdown by recipe ingredients', true, true),
('Ingredient Usage Estimations', 'ingredient_usage_estimations', 'Production', 'Estimated ingredient usage from production events (no stock deduction)', true, true);

NEW DASHBOARD WIDGETS:

INSERT INTO DashboardWidgets (name, description, is_active, default_order, widget_icon, widget_type) VALUES
('Production Summary', 'Daily production overview', true, 7, 'chef-hat', 'Metric'),
('Usage Events', 'Recent usage events', true, 8, 'clipboard', 'List'),
('Recipe Performance', 'Top performing recipes', true, 9, 'chart-bar', 'Graph'),
('Image Upload Status', 'Image processing status', true, 10, 'camera', 'List');


END OF MODULES 14-15: Complete Usage Events & Production Tracking with Enhanced Image Management.
This schema now includes comprehensive production tracking capabilities with ingredient usage estimation, 
visual documentation support, and advanced analytics - all while maintaining inventory control by NOT 
automatically deducting stock during usage event submission.

TOTAL SCHEMA SUMMARY:
- Total Tables: 70+ (including new Usage Events and Enhanced Image Management)
- Total Views: 10+ (including production and ingredient usage analytics)
- Total Triggers: 5+ (including advanced ingredient usage estimation)
- Total Indexes: 50+ (optimized for multi-tenant performance)
- Enhanced Features: Complete production workflow, visual documentation, cost estimation
- Security: Row Level Security (RLS) enabled on all tenant-specific tables

END OF MODULES 8-15: All Reporting, Analytics, Settings, Subscriptions, Permissions, Production Planning, Usage Events & Image Management.
This is the complete, production-grade schema v2.3 with enhanced Usage Events System and comprehensive production tracking capabilities.
