service: qrbilling-backend

provider:
  name: aws
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  # ECR image configuration
  ecr:
    images:
      qrbilling-backend:
        path: ./
        file: Dockerfile
        # Force a single-arch Docker image build so Lambda doesn't receive a manifest list/OCI media type
        # Supported values: linux/amd64 or linux/arm64 (must match function architecture below)
        platform: linux/amd64
  
  # HTTP API CORS configuration
  httpApi:
    cors:
      allowedOrigins:
        - 'http://localhost:3000'
        - 'http://localhost:3001' 
        - 'http://127.0.0.1:3000'
        - 'http://127.0.0.1:3001'
        - 'https://main.d2luvulypylagv.amplifyapp.com'
      allowedHeaders:
        - Content-Type
        - Authorization
        - Cache-Control
        - X-Tenant-Id
        - X-Business-Id
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
        - PATCH
      allowCredentials: true
  
  # IAM permissions for Lambda function
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: 'arn:aws:logs:*:*:*'
        # Grant permissions to retrieve secrets and parameters
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - secretsmanager:GetSecretValue
          Resource: 'arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:qrbilling/*'

functions:
  api:
    image: qrbilling-backend # Refers to the image name under `ecr`
    # Architecture is determined by the Docker image platform (linux/amd64) set in ECR config above
    memorySize: ${self:custom.stages.${self:provider.stage}.memorySize}
    timeout: ${self:custom.stages.${self:provider.stage}.timeout}
    events:
      - httpApi:
          path: /{proxy+}
          method: ANY
      - httpApi:
          path: /
          method: ANY
    environment:
      NODE_ENV: ${self:provider.stage}
      DATABASE_URL: ${env:DATABASE_URL}
      RUNTIME_DATABASE_URL: ${env:RUNTIME_DATABASE_URL}
      JWT_SECRET: ${env:JWT_SECRET}
      FRONTEND_REDIRECT_ORIGIN: ${env:FRONTEND_REDIRECT_ORIGIN}
      PUBLIC_BASE_URL: ${env:PUBLIC_BASE_URL, 'https://ofsmmmkot9.execute-api.ap-south-1.amazonaws.com/dev'}
      API_BASE_URL: ${env:API_BASE_URL, 'https://ofsmmmkot9.execute-api.ap-south-1.amazonaws.com/dev'}
      ALLOW_DIRECT_PAY_WITHOUT_ORDER: ${env:ALLOW_DIRECT_PAY_WITHOUT_ORDER, 'true'}
      GOOGLE_VISION_API_KEY: ${env:GOOGLE_VISION_API_KEY}
      # CRITICAL: Multi-tenancy deployment fix
      STRICT_MULTI_TENANCY: false
      DEFAULT_TENANT_ID: 1
      VERBOSE_TENANT_LOGS: true

# Package configuration removed - not compatible with container deployment
# Plugins (removed incompatible plugins for container deployment)
plugins: []

# Custom configuration
custom:
  # Environment-specific configurations for memory and timeout
  stages:
    dev:
      memorySize: 512
      timeout: 30
    staging:
      memorySize: 1024
      timeout: 60
    prod:
      memorySize: 1024
      timeout: 60

# Resources (optional - for creating additional AWS resources)
resources:
  Resources:
    # CloudWatch Log Group for better log retention
    ApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/qrbilling-backend-${self:provider.stage}-api
        RetentionInDays: 14
        
  Outputs:
    HttpApiId:
      Value:
        Ref: HttpApi
      Export:
        Name: ${self:service}-${self:provider.stage}-httpApiId
        
    HttpApiUrl:
      Value:
        Fn::Join:
          - ''
          - - 'https://'
            - Ref: HttpApi
            - '.execute-api.'
            - ${aws:region}
            - '.amazonaws.com/'
            - ${self:provider.stage}
      Export:
        Name: ${self:service}-${self:provider.stage}-httpApiUrl
