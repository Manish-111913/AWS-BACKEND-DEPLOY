service: qrbilling-backend

provider:
  name: aws
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  # ECR image configuration
  ecr:
    images:
      qrbilling-backend:
        path: ./
        file: Dockerfile
        platform: linux/amd64
  
  # IAM permissions for Lambda function
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: 'arn:aws:logs:*:*:*'
        # Grant permissions to retrieve secrets and parameters
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - secretsmanager:GetSecretValue
          Resource: 'arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:qrbilling/*'

# HTTP API CORS configuration (Global level)
# This is correctly configured to apply to all routes
httpApi:
  cors:
    allowedOrigins:
      - 'http://localhost:3000'
      - 'http://localhost:3001' 
      - 'http://127.0.0.1:3000'
      - 'http://127.0.0.1:3001'
      - 'https://menu-frontend-9327c.web.app'
    allowedHeaders:
      - Content-Type
      - Authorization
      - Cache-Control
      - X-Tenant-Id
      - X-Business-Id
    allowedMethods:
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
      - PATCH
    allowCredentials: true

functions:
  api:
    image: qrbilling-backend # Refers to the image name under `ecr`
    memorySize: ${self:custom.stages.${self:provider.stage}.memorySize}
    timeout: ${self:custom.stages.${self:provider.stage}.timeout}
    events:
      - httpApi:
          path: /{proxy+}
          method: ANY
      - httpApi:
          path: /
          method: ANY
    environment:
      # Inject environment variables from .env.lambda file
      NODE_ENV: ${self:provider.stage}
      DATABASE_URL: ${file(.env.lambda):DATABASE_URL, ''}
      DB_HOST: ${file(.env.lambda):DB_HOST, ''}
      DB_PORT: ${file(.env.lambda):DB_PORT, '5432'}
      DB_NAME: ${file(.env.lambda):DB_NAME, ''}
      DB_USER: ${file(.env.lambda):DB_USER, ''}
      DB_PASSWORD: ${file(.env.lambda):DB_PASSWORD, ''}
      JWT_SECRET: ${file(.env.lambda):JWT_SECRET, ''}
      FRONTEND_REDIRECT_ORIGIN: ${file(.env.lambda):FRONTEND_REDIRECT_ORIGIN, 'https://menu-frontend-9327c.web.app'}
      PUBLIC_BASE_URL: ${file(.env.lambda):PUBLIC_BASE_URL, ''}
      ALLOW_DIRECT_PAY_WITHOUT_ORDER: ${file(.env.lambda):ALLOW_DIRECT_PAY_WITHOUT_ORDER, 'false'}
      ONBOARDING_TABLE_COUNT: ${file(.env.lambda):ONBOARDING_TABLE_COUNT, '20'}

# Package configuration removed - not compatible with container deployment
# Plugins (removed incompatible plugins for container deployment)
plugins: []

# Custom configuration
custom:
  # Environment-specific configurations for memory and timeout
  stages:
    dev:
      memorySize: 512
      timeout: 30
    staging:
      memorySize: 1024
      timeout: 60
    prod:
      memorySize: 1024
      timeout: 60

# Resources (optional - for creating additional AWS resources)
resources:
  Resources:
    # CloudWatch Log Group for better log retention
    ApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/qrbilling-backend-${self:provider.stage}-api
        RetentionInDays: 14
        
  Outputs:
    HttpApiId:
      Value:
        Ref: HttpApi
      Export:
        Name: ${self:service}-${self:provider.stage}-httpApiId
        
    HttpApiUrl:
      Value:
        Fn::Join:
          - ''
          - - 'https://'
            - Ref: HttpApi
            - '.execute-api.'
            - ${aws:region}
            - '.amazonaws.com/'
            - ${self:provider.stage}
      Export:
        Name: ${self:service}-${self:provider.stage}-httpApiUrl
